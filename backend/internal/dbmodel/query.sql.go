// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: query.sql

package dbmodel

import (
	"context"

	"github.com/google/uuid"
)

const createDevice = `-- name: CreateDevice :one
INSERT INTO devices(name, type, layer_id, location_x, location_y, angle, ip_address, mac_address, camera_connection_url)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)
RETURNING id, name, type, layer_id, location_x, location_y, angle, ip_address, camera_connection_url, mac_address, created_at, updated_at
`

type CreateDeviceParams struct {
	Name                string     `json:"name"`
	Type                DeviceType `json:"type"`
	LayerID             uuid.UUID  `json:"layer_id"`
	LocationX           float64    `json:"location_x"`
	LocationY           float64    `json:"location_y"`
	Angle               float64    `json:"angle"`
	IpAddress           *string    `json:"ip_address"`
	MacAddress          string     `json:"mac_address"`
	CameraConnectionUrl *string    `json:"camera_connection_url"`
}

func (q *Queries) CreateDevice(ctx context.Context, arg CreateDeviceParams) (Device, error) {
	row := q.db.QueryRow(ctx, createDevice,
		arg.Name,
		arg.Type,
		arg.LayerID,
		arg.LocationX,
		arg.LocationY,
		arg.Angle,
		arg.IpAddress,
		arg.MacAddress,
		arg.CameraConnectionUrl,
	)
	var i Device
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Type,
		&i.LayerID,
		&i.LocationX,
		&i.LocationY,
		&i.Angle,
		&i.IpAddress,
		&i.CameraConnectionUrl,
		&i.MacAddress,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createLayer = `-- name: CreateLayer :one
INSERT INTO layers(object_id, floor_name, angles_coordinates, image_name, angle)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, object_id, floor_name, angles_coordinates, image_name, angle, created_at, updated_at
`

type CreateLayerParams struct {
	ObjectID          uuid.UUID         `json:"object_id"`
	FloorName         string            `json:"floor_name"`
	AnglesCoordinates AnglesCoordinates `json:"angles_coordinates"`
	ImageName         string            `json:"image_name"`
	Angle             float64           `json:"angle"`
}

func (q *Queries) CreateLayer(ctx context.Context, arg CreateLayerParams) (Layer, error) {
	row := q.db.QueryRow(ctx, createLayer,
		arg.ObjectID,
		arg.FloorName,
		arg.AnglesCoordinates,
		arg.ImageName,
		arg.Angle,
	)
	var i Layer
	err := row.Scan(
		&i.ID,
		&i.ObjectID,
		&i.FloorName,
		&i.AnglesCoordinates,
		&i.ImageName,
		&i.Angle,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createObject = `-- name: CreateObject :one
INSERT INTO objects(name, address, description, lat, long)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, name, address, description, lat, long, created_at, updated_at
`

type CreateObjectParams struct {
	Name        string  `json:"name"`
	Address     string  `json:"address"`
	Description string  `json:"description"`
	Lat         float64 `json:"lat"`
	Long        float64 `json:"long"`
}

func (q *Queries) CreateObject(ctx context.Context, arg CreateObjectParams) (Object, error) {
	row := q.db.QueryRow(ctx, createObject,
		arg.Name,
		arg.Address,
		arg.Description,
		arg.Lat,
		arg.Long,
	)
	var i Object
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Address,
		&i.Description,
		&i.Lat,
		&i.Long,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users(username, password_hash, is_admin)
VALUES ($1, $2, $3)
RETURNING id, username, password_hash, is_admin
`

type CreateUserParams struct {
	Username     string `json:"username"`
	PasswordHash string `json:"password_hash"`
	IsAdmin      bool   `json:"is_admin"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser, arg.Username, arg.PasswordHash, arg.IsAdmin)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.PasswordHash,
		&i.IsAdmin,
	)
	return i, err
}

const deleteDeviceById = `-- name: DeleteDeviceById :exec
DELETE FROM devices
WHERE id = $1
`

func (q *Queries) DeleteDeviceById(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteDeviceById, id)
	return err
}

const deleteLayerById = `-- name: DeleteLayerById :exec
DELETE FROM layers
WHERE id = $1
`

func (q *Queries) DeleteLayerById(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteLayerById, id)
	return err
}

const deleteLayerDevices = `-- name: DeleteLayerDevices :exec
DELETE FROM devices
WHERE layer_id = $1
`

func (q *Queries) DeleteLayerDevices(ctx context.Context, layerID uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteLayerDevices, layerID)
	return err
}

const deleteObjectLayers = `-- name: DeleteObjectLayers :exec
DELETE FROM layers
WHERE object_id = $1
`

func (q *Queries) DeleteObjectLayers(ctx context.Context, objectID uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteObjectLayers, objectID)
	return err
}

const getAllDevicesMacs = `-- name: GetAllDevicesMacs :many
SELECT mac_address
FROM devices
`

func (q *Queries) GetAllDevicesMacs(ctx context.Context) ([]string, error) {
	rows, err := q.db.Query(ctx, getAllDevicesMacs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var mac_address string
		if err := rows.Scan(&mac_address); err != nil {
			return nil, err
		}
		items = append(items, mac_address)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllLayerDevices = `-- name: GetAllLayerDevices :many
SELECT id, name, type, layer_id, location_x, location_y, angle, ip_address, camera_connection_url, mac_address, created_at, updated_at
from devices
WHERE layer_id = $1
`

func (q *Queries) GetAllLayerDevices(ctx context.Context, layerID uuid.UUID) ([]Device, error) {
	rows, err := q.db.Query(ctx, getAllLayerDevices, layerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Device
	for rows.Next() {
		var i Device
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Type,
			&i.LayerID,
			&i.LocationX,
			&i.LocationY,
			&i.Angle,
			&i.IpAddress,
			&i.CameraConnectionUrl,
			&i.MacAddress,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllObjectLayers = `-- name: GetAllObjectLayers :many
SELECT id, object_id, floor_name, angles_coordinates, image_name, angle, created_at, updated_at
FROM layers
WHERE object_id=$1
`

func (q *Queries) GetAllObjectLayers(ctx context.Context, objectID uuid.UUID) ([]Layer, error) {
	rows, err := q.db.Query(ctx, getAllObjectLayers, objectID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Layer
	for rows.Next() {
		var i Layer
		if err := rows.Scan(
			&i.ID,
			&i.ObjectID,
			&i.FloorName,
			&i.AnglesCoordinates,
			&i.ImageName,
			&i.Angle,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllObjects = `-- name: GetAllObjects :many
SELECT id, name, address, description, lat, long, created_at, updated_at
FROM objects
`

func (q *Queries) GetAllObjects(ctx context.Context) ([]Object, error) {
	rows, err := q.db.Query(ctx, getAllObjects)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Object
	for rows.Next() {
		var i Object
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Address,
			&i.Description,
			&i.Lat,
			&i.Long,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllUsers = `-- name: GetAllUsers :many
SELECT id, username, password_hash, is_admin
FROM users
`

func (q *Queries) GetAllUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.Query(ctx, getAllUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.PasswordHash,
			&i.IsAdmin,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCameraInfoByDeviceId = `-- name: GetCameraInfoByDeviceId :one
SELECT camera_connection_url
FROM devices
WHERE id = $1
`

func (q *Queries) GetCameraInfoByDeviceId(ctx context.Context, id uuid.UUID) (*string, error) {
	row := q.db.QueryRow(ctx, getCameraInfoByDeviceId, id)
	var camera_connection_url *string
	err := row.Scan(&camera_connection_url)
	return camera_connection_url, err
}

const getDeviceById = `-- name: GetDeviceById :one
SELECT id, name, type, layer_id, location_x, location_y, angle, ip_address, camera_connection_url, mac_address, created_at, updated_at
FROM devices
WHERE id = $1
`

func (q *Queries) GetDeviceById(ctx context.Context, id uuid.UUID) (Device, error) {
	row := q.db.QueryRow(ctx, getDeviceById, id)
	var i Device
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Type,
		&i.LayerID,
		&i.LocationX,
		&i.LocationY,
		&i.Angle,
		&i.IpAddress,
		&i.CameraConnectionUrl,
		&i.MacAddress,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getDeviceByMacAddress = `-- name: GetDeviceByMacAddress :one
SELECT id, name, type, layer_id, location_x, location_y, angle, ip_address, camera_connection_url, mac_address, created_at, updated_at
FROM devices
where mac_address=$1
`

func (q *Queries) GetDeviceByMacAddress(ctx context.Context, macAddress string) (Device, error) {
	row := q.db.QueryRow(ctx, getDeviceByMacAddress, macAddress)
	var i Device
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Type,
		&i.LayerID,
		&i.LocationX,
		&i.LocationY,
		&i.Angle,
		&i.IpAddress,
		&i.CameraConnectionUrl,
		&i.MacAddress,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getLayerById = `-- name: GetLayerById :one
SELECT id, object_id, floor_name, angles_coordinates, image_name, angle, created_at, updated_at
FROM layers
WHERE id = $1
`

func (q *Queries) GetLayerById(ctx context.Context, id uuid.UUID) (Layer, error) {
	row := q.db.QueryRow(ctx, getLayerById, id)
	var i Layer
	err := row.Scan(
		&i.ID,
		&i.ObjectID,
		&i.FloorName,
		&i.AnglesCoordinates,
		&i.ImageName,
		&i.Angle,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getObjectById = `-- name: GetObjectById :one
SELECT id, name, address, description, lat, long, created_at, updated_at
FROM objects
WHERE id = $1
`

func (q *Queries) GetObjectById(ctx context.Context, id uuid.UUID) (Object, error) {
	row := q.db.QueryRow(ctx, getObjectById, id)
	var i Object
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Address,
		&i.Description,
		&i.Lat,
		&i.Long,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getRandomDevice = `-- name: GetRandomDevice :one
SELECT id, name, type, layer_id, location_x, location_y, angle, ip_address, camera_connection_url, mac_address, created_at, updated_at FROM devices
ORDER BY RANDOM()
LIMIT 1
`

func (q *Queries) GetRandomDevice(ctx context.Context) (Device, error) {
	row := q.db.QueryRow(ctx, getRandomDevice)
	var i Device
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Type,
		&i.LayerID,
		&i.LocationX,
		&i.LocationY,
		&i.Angle,
		&i.IpAddress,
		&i.CameraConnectionUrl,
		&i.MacAddress,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserById = `-- name: GetUserById :one
SELECT id, username, password_hash, is_admin
FROM users
WHERE id = $1
`

func (q *Queries) GetUserById(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRow(ctx, getUserById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.PasswordHash,
		&i.IsAdmin,
	)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT id, username, password_hash, is_admin
FROM users
WHERE username = $1
`

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByUsername, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.PasswordHash,
		&i.IsAdmin,
	)
	return i, err
}

const isMacAddressBusy = `-- name: IsMacAddressBusy :one
SELECT EXISTS(
    SELECT id, name, type, layer_id, location_x, location_y, angle, ip_address, camera_connection_url, mac_address, created_at, updated_at
    from devices
    WHERE mac_address = $1
) as is_busy
`

func (q *Queries) IsMacAddressBusy(ctx context.Context, macAddress string) (bool, error) {
	row := q.db.QueryRow(ctx, isMacAddressBusy, macAddress)
	var is_busy bool
	err := row.Scan(&is_busy)
	return is_busy, err
}

const updateDevice = `-- name: UpdateDevice :one
UPDATE devices
SET name=$2, type=$3, layer_id=$4, location_x=$5, location_y=$6, angle=$7, ip_address=$8, mac_address=$9, camera_connection_url=$10, updated_at=now()
WHERE id=$1
RETURNING id, name, type, layer_id, location_x, location_y, angle, ip_address, camera_connection_url, mac_address, created_at, updated_at
`

type UpdateDeviceParams struct {
	ID                  uuid.UUID  `json:"id"`
	Name                string     `json:"name"`
	Type                DeviceType `json:"type"`
	LayerID             uuid.UUID  `json:"layer_id"`
	LocationX           float64    `json:"location_x"`
	LocationY           float64    `json:"location_y"`
	Angle               float64    `json:"angle"`
	IpAddress           *string    `json:"ip_address"`
	MacAddress          string     `json:"mac_address"`
	CameraConnectionUrl *string    `json:"camera_connection_url"`
}

func (q *Queries) UpdateDevice(ctx context.Context, arg UpdateDeviceParams) (Device, error) {
	row := q.db.QueryRow(ctx, updateDevice,
		arg.ID,
		arg.Name,
		arg.Type,
		arg.LayerID,
		arg.LocationX,
		arg.LocationY,
		arg.Angle,
		arg.IpAddress,
		arg.MacAddress,
		arg.CameraConnectionUrl,
	)
	var i Device
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Type,
		&i.LayerID,
		&i.LocationX,
		&i.LocationY,
		&i.Angle,
		&i.IpAddress,
		&i.CameraConnectionUrl,
		&i.MacAddress,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateLayer = `-- name: UpdateLayer :one
UPDATE layers
SET floor_name = $2, angles_coordinates = $3, image_name = $4, angle = $5, updated_at=now()
WHERE id=$1
RETURNING id, object_id, floor_name, angles_coordinates, image_name, angle, created_at, updated_at
`

type UpdateLayerParams struct {
	ID                uuid.UUID         `json:"id"`
	FloorName         string            `json:"floor_name"`
	AnglesCoordinates AnglesCoordinates `json:"angles_coordinates"`
	ImageName         string            `json:"image_name"`
	Angle             float64           `json:"angle"`
}

func (q *Queries) UpdateLayer(ctx context.Context, arg UpdateLayerParams) (Layer, error) {
	row := q.db.QueryRow(ctx, updateLayer,
		arg.ID,
		arg.FloorName,
		arg.AnglesCoordinates,
		arg.ImageName,
		arg.Angle,
	)
	var i Layer
	err := row.Scan(
		&i.ID,
		&i.ObjectID,
		&i.FloorName,
		&i.AnglesCoordinates,
		&i.ImageName,
		&i.Angle,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateObject = `-- name: UpdateObject :one
UPDATE objects
SET name=$2, address = $3, description = $4, lat=$5, long=$6, updated_at=now()
WHERE id=$1
RETURNING id, name, address, description, lat, long, created_at, updated_at
`

type UpdateObjectParams struct {
	ID          uuid.UUID `json:"id"`
	Name        string    `json:"name"`
	Address     string    `json:"address"`
	Description string    `json:"description"`
	Lat         float64   `json:"lat"`
	Long        float64   `json:"long"`
}

func (q *Queries) UpdateObject(ctx context.Context, arg UpdateObjectParams) (Object, error) {
	row := q.db.QueryRow(ctx, updateObject,
		arg.ID,
		arg.Name,
		arg.Address,
		arg.Description,
		arg.Lat,
		arg.Long,
	)
	var i Object
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Address,
		&i.Description,
		&i.Lat,
		&i.Long,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

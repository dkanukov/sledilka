// Code generated by MockGen. DO NOT EDIT.
// Source: backend/internal/network (interfaces: NetworkClient)

// Package mock_network is a generated GoMock package.
package mock_network

import (
	network "backend/internal/network"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockNetworkClient is a mock of NetworkClient interface.
type MockNetworkClient struct {
	ctrl     *gomock.Controller
	recorder *MockNetworkClientMockRecorder
}

// MockNetworkClientMockRecorder is the mock recorder for MockNetworkClient.
type MockNetworkClientMockRecorder struct {
	mock *MockNetworkClient
}

// NewMockNetworkClient creates a new mock instance.
func NewMockNetworkClient(ctrl *gomock.Controller) *MockNetworkClient {
	mock := &MockNetworkClient{ctrl: ctrl}
	mock.recorder = &MockNetworkClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNetworkClient) EXPECT() *MockNetworkClientMockRecorder {
	return m.recorder
}

// GetAllMacAddresses mocks base method.
func (m *MockNetworkClient) GetAllMacAddresses(arg0 context.Context, arg1 *network.Empty, arg2 ...grpc.CallOption) (*network.GetAllMacAddressesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAllMacAddresses", varargs...)
	ret0, _ := ret[0].(*network.GetAllMacAddressesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllMacAddresses indicates an expected call of GetAllMacAddresses.
func (mr *MockNetworkClientMockRecorder) GetAllMacAddresses(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllMacAddresses", reflect.TypeOf((*MockNetworkClient)(nil).GetAllMacAddresses), varargs...)
}

// IsActiveListDevice mocks base method.
func (m *MockNetworkClient) IsActiveListDevice(arg0 context.Context, arg1 *network.IsActiveListDeviceRequest, arg2 ...grpc.CallOption) (*network.IsActiveListDeviceResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "IsActiveListDevice", varargs...)
	ret0, _ := ret[0].(*network.IsActiveListDeviceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsActiveListDevice indicates an expected call of IsActiveListDevice.
func (mr *MockNetworkClientMockRecorder) IsActiveListDevice(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsActiveListDevice", reflect.TypeOf((*MockNetworkClient)(nil).IsActiveListDevice), varargs...)
}

// Subscribe mocks base method.
func (m *MockNetworkClient) Subscribe(arg0 context.Context, arg1 *network.SubscribeRequest, arg2 ...grpc.CallOption) (network.Network_SubscribeClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Subscribe", varargs...)
	ret0, _ := ret[0].(network.Network_SubscribeClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Subscribe indicates an expected call of Subscribe.
func (mr *MockNetworkClientMockRecorder) Subscribe(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockNetworkClient)(nil).Subscribe), varargs...)
}

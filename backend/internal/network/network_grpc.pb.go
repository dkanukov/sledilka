// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.26.1
// source: api/network.proto

package network

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NetworkClient is the client API for Network service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NetworkClient interface {
	IsActiveListDevice(ctx context.Context, in *IsActiveListDeviceRequest, opts ...grpc.CallOption) (*IsActiveListDeviceResponse, error)
	Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (Network_SubscribeClient, error)
	GetAllMacAddresses(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetAllMacAddressesResponse, error)
}

type networkClient struct {
	cc grpc.ClientConnInterface
}

func NewNetworkClient(cc grpc.ClientConnInterface) NetworkClient {
	return &networkClient{cc}
}

func (c *networkClient) IsActiveListDevice(ctx context.Context, in *IsActiveListDeviceRequest, opts ...grpc.CallOption) (*IsActiveListDeviceResponse, error) {
	out := new(IsActiveListDeviceResponse)
	err := c.cc.Invoke(ctx, "/network.network/IsActiveListDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkClient) Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (Network_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &Network_ServiceDesc.Streams[0], "/network.network/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &networkSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Network_SubscribeClient interface {
	Recv() (*DeviceStatus, error)
	grpc.ClientStream
}

type networkSubscribeClient struct {
	grpc.ClientStream
}

func (x *networkSubscribeClient) Recv() (*DeviceStatus, error) {
	m := new(DeviceStatus)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *networkClient) GetAllMacAddresses(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetAllMacAddressesResponse, error) {
	out := new(GetAllMacAddressesResponse)
	err := c.cc.Invoke(ctx, "/network.network/GetAllMacAddresses", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NetworkServer is the server API for Network service.
// All implementations must embed UnimplementedNetworkServer
// for forward compatibility
type NetworkServer interface {
	IsActiveListDevice(context.Context, *IsActiveListDeviceRequest) (*IsActiveListDeviceResponse, error)
	Subscribe(*SubscribeRequest, Network_SubscribeServer) error
	GetAllMacAddresses(context.Context, *Empty) (*GetAllMacAddressesResponse, error)
	mustEmbedUnimplementedNetworkServer()
}

// UnimplementedNetworkServer must be embedded to have forward compatible implementations.
type UnimplementedNetworkServer struct {
}

func (UnimplementedNetworkServer) IsActiveListDevice(context.Context, *IsActiveListDeviceRequest) (*IsActiveListDeviceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsActiveListDevice not implemented")
}
func (UnimplementedNetworkServer) Subscribe(*SubscribeRequest, Network_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedNetworkServer) GetAllMacAddresses(context.Context, *Empty) (*GetAllMacAddressesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllMacAddresses not implemented")
}
func (UnimplementedNetworkServer) mustEmbedUnimplementedNetworkServer() {}

// UnsafeNetworkServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NetworkServer will
// result in compilation errors.
type UnsafeNetworkServer interface {
	mustEmbedUnimplementedNetworkServer()
}

func RegisterNetworkServer(s grpc.ServiceRegistrar, srv NetworkServer) {
	s.RegisterService(&Network_ServiceDesc, srv)
}

func _Network_IsActiveListDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsActiveListDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServer).IsActiveListDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/network.network/IsActiveListDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServer).IsActiveListDevice(ctx, req.(*IsActiveListDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Network_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NetworkServer).Subscribe(m, &networkSubscribeServer{stream})
}

type Network_SubscribeServer interface {
	Send(*DeviceStatus) error
	grpc.ServerStream
}

type networkSubscribeServer struct {
	grpc.ServerStream
}

func (x *networkSubscribeServer) Send(m *DeviceStatus) error {
	return x.ServerStream.SendMsg(m)
}

func _Network_GetAllMacAddresses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServer).GetAllMacAddresses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/network.network/GetAllMacAddresses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServer).GetAllMacAddresses(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Network_ServiceDesc is the grpc.ServiceDesc for Network service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Network_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "network.network",
	HandlerType: (*NetworkServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IsActiveListDevice",
			Handler:    _Network_IsActiveListDevice_Handler,
		},
		{
			MethodName: "GetAllMacAddresses",
			Handler:    _Network_GetAllMacAddresses_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _Network_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/network.proto",
}
